# IMPORTS
import telebot
from telebot import types
import requests
from dotenv import load_dotenv
import os
from bs4 import BeautifulSoup as BS

#LOADS
load_dotenv()
bot_token = os.getenv('Token')
bot = telebot.TeleBot(bot_token)
    

# BOT_LOGICS
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ù–∞—á–∞—Ç—å')
    markup.add(item1,)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç,{0.first_name}! –≠—Ç–æ –±–æ—Ç Axelar Network.'.format(message.from_user), reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text(message):
    if message.text == '–ù–∞—á–∞—Ç—å':
        markup_info = types.ReplyKeyboardMarkup(resize_keyboard=True)
        about = types.KeyboardButton("–û –ø—Ä–æ–µ–∫—Ç–µ")
        markup_info.add(about)
        bot.send_message(message.chat.id, '–ù–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ', parse_mode="HTML", reply_markup=markup_info)
    if message.text == '–û –ø—Ä–æ–µ–∫—Ç–µ':
        markup_about = types.ReplyKeyboardMarkup(resize_keyboard=True)
        team  = types.KeyboardButton('–ö–æ–º–∞–Ω–¥–∞')
        sponsors = types.KeyboardButton('–°–ø–æ–Ω—Å–æ—Ä—ã')
        eco_sys = types.KeyboardButton('–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞')
        links = types.KeyboardButton('–û—Ñ—Ñ. —Å—Å—ã–ª–∫–∏')
        news = types.KeyboardButton('–ë–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞')
        faq  = types.KeyboardButton('–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
        markup_about.add(team, sponsors, eco_sys,links,news, faq)
        bot.send_message(message.chat.id,'<b>AXELAR NETWORK</b>'+'\n'+'<i>Axelar network</i> - —ç—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –±–ª–æ–∫—á–µ–π–Ω—ã —á–µ—Ä–µ–∑ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–µ—Ç—å –∏ SDK –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ API. –ò—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ç—å –∏ SDK, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞–º–∏ –±–ª–æ–∫—á–µ–π–Ω–∞, —Å–æ–∑–¥–∞–≤–∞—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∞–∫—Ç–∏–≤–∞–º, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º.'+'\n' + '\n' + '<b>–ß–µ–º Axelar –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫—Ä–æ—Å—Å-—á–µ–π–Ω —Ä–µ—à–µ–Ω–∏–π?</b>'+'\n' + '\n' + 'Axelar –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –º–µ–∂—Ü–µ–ø–æ—á–µ—á–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–µ–º, —á—Ç–æ –æ–Ω:' + '\n' + 'üî∫ –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö' + '\n' + 'üî∫ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ü–µ–ø–æ—á–∫–∞—Ö L1, L2, Proof of Work (PoW) –∏–ª–∏ Proof of Stake (POS)' + '\n' + 'üî∫–°–ø–æ—Å–æ–±–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞–º–∏' + '\n' + 'üî∫ –û—Ç–∫—Ä—ã—Ç –¥–ª—è –ª—é–±–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –∂–µ–ª–∞—é—â–µ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–≤–µ—Ä—Ö —Å–µ—Ç–∏', parse_mode="HTML", reply_markup=markup_about)
    if message.text == '–ö–æ–º–∞–Ω–¥–∞':       
        markup_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup_back.add(back)
        markup = types.InlineKeyboardMarkup()
        jun1=types.InlineKeyboardButton("üë® [–°–û–£–ß–ï–†–ï–î–ò–¢–ï–õ–¨ | –ò–ù–ñ–ï–ù–ï–†] Sergey Gorbunov", url='https://cs.uwaterloo.ca/~sgorbuno/')
        markup.row(jun1)
        jun2=types.InlineKeyboardButton("üë® [–°–û–£–ß–ï–†–ï–î–ò–¢–ï–õ–¨ | –ò–ù–ñ–ï–ù–ï–†] Georgios Vlachos", url='https://www.linkedin.com/in/georgiosvlachos')
        jun3=types.InlineKeyboardButton("üë® [ENGINEERING] Christian Gorenflo", url='https://www.linkedin.com/in/christian-gorenflo-8a3394124', parse_mode='HTML')
        markup.row(jun2, jun3)
        jun4=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–†] Gus Gutoski", url='https://www.linkedin.com/in/ggutoski/')
        markup.row(jun4)
        jun5=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–†] Stelios Daveas", url='https://www.linkedin.com/in/sdaveas/')
        jun6=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–†] Jo√£o Sousa", url='https://www.linkedin.com/in/jcs47/')
        markup.row(jun5,jun6)
        jun7=types.InlineKeyboardButton("üë© [–°–û–û–ë–©–ï–°–¢–í–û] Kate Stapleton", url='https://twitter.com/kaite_stapleton')
        markup.row(jun7)
        jun8=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–†] Sammy Liu", url='https://www.linkedin.com/in/liu-sammy/')
        jun9=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–†] Jackson Virgo", url='https://twitter.com/envlocal')
        markup.row(jun8,jun9)
        jun10=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–† Haiyi Zhong", url='https://www.linkedin.com/in/haiyi-zhong-6274108b/')
        markup.row(jun10)
        jun11=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–†] Michael De Luca", url='https://www.linkedin.com/in/delucamike/')
        jun12=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–†] Jacky Yuan", url='https://www.linkedin.com/in/yijie-jacky-yuan-40b31212b/')
        markup.row(jun11,jun12)
        jun13=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–†] Milap Sheth", url='https://www.linkedin.com/in/milapsheth1/')
        markup.row(jun13)
        jun14=types.InlineKeyboardButton("üë® [–ë–ï–ó–ù–ï–° –û–ü–ï–†–¶–ò–ò] Nav Pannu", url='https://www.linkedin.com/in/navjitpannu/')
        jun15=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–†] Canh Trinh", url='https://www.linkedin.com/in/canhtrinh/')
        markup.row(jun14,jun15)
        jun16=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–†] Wil Collins", url='https://twitter.com/wc3po')
        markup.row(jun16)
        jun17=types.InlineKeyboardButton("üë® [–ò–ù–ñ–ï–ù–ï–†] Talal Ashraf", url='https://www.linkedin.com/in/talalashraf/')
        jun18=types.InlineKeyboardButton("üë® [–ú–ê–†–ö–ï–¢–ò–ù–ì] Eli Laipson", url='https://twitter.com/EliLaipson')
        markup.row(jun17,jun18)
        bot.send_message(message.chat.id,'<b>–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞:</b>',reply_markup=markup, parse_mode='HTML')
    if message.text == '–°–ø–æ–Ω—Å–æ—Ä—ã':
        markup_backers = types.InlineKeyboardMarkup()
        backers1=types.InlineKeyboardButton('COINBASE',url='https://www.coinbase.com/ru/')
        backers2=types.InlineKeyboardButton('BINANCE', url='https://www.binance.com/ru')
        backers3=types.InlineKeyboardButton('GALAXE DIGITAL', url='https://www.galaxydigital.io/')
        backers4=types.InlineKeyboardButton('DRAGONFLY CAPITAL', url='https://www.dcp.capital/')
        markup_backers.add(backers1,backers2,backers3,backers4)
        bot.send_message(message.chat.id,'<b>–°–ø–æ–Ω—Å–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞:</b>',reply_markup=markup_backers, parse_mode='HTML')
    if message.text == '–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞':
        markup_eco = types.InlineKeyboardMarkup()
        eco1 = types.InlineKeyboardButton('AVALANCHE', url='https://www.avax.network/')
        eco2 = types.InlineKeyboardButton('TERRA', url='https://www.terra.money/')
        eco3 = types.InlineKeyboardButton('POLYGON', url='https://polygon.technology/')
        eco4 = types.InlineKeyboardButton('MOONBEAN', url='https://moonbeam.network/')
        markup_eco.add(eco1,eco2,eco3,eco4)
        bot.send_message(message.chat.id,'<b>–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞:</b>',reply_markup=markup_eco, parse_mode='HTML')
    if message.text == '–û—Ñ—Ñ. —Å—Å—ã–ª–∫–∏':
        markup_links = types.InlineKeyboardMarkup()
        link1=types.InlineKeyboardButton('üåé –°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞', url='https://axelar.network/')
        link2=types.InlineKeyboardButton('‚úàÔ∏è –¢–µ–ª–µ–≥—Ä–∞–º', url='https://t.me/axelarcommunity')
        link3=types.InlineKeyboardButton('üê¶–¢–≤–∏—Ç—Ç–µ—Ä', url='https://twitter.com/axelarcore')
        link4=types.InlineKeyboardButton('üìí Medium', url='http://medium.com/axelar')
        link5=types.InlineKeyboardButton('üéÆ –î–∏—Å–∫–æ—Ä–¥', url='https://discord.gg/aRZ3Ra6f7D')
        links6=types.InlineKeyboardButton('üì∫Youtube', url='https://www.youtube.com/channel/UCf8GFg58fdp1iZwLAOV1Tgg')
        markup_links.add(link1,link2,link3,link4, link5, links6)
        bot.send_message(message.chat.id,'<b>–û—Ñ—Ñ. —Å—Å—ã–ª–∫–∏:</b>',parse_mode='HTML',reply_markup=markup_links)
    if message.text =='–ë–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞':
        r=requests.get('https://axelar.network/blog')
        html=BS(r.content,'html.parser')
        for el in html.select(".elementor-posts-container > .category-uncategorized"):
            title = el.select(".elementor-post__title > a")
            tit = title[0].text
            date = el.select('.elementor-post__meta-data > .elementor-post-date')
            date_post = date[0].text
            discription = el.select('.elementor-post__excerpt > p')
            url=el.find(class_='elementor-post__thumbnail__link', href=True)
            url_post = url['href']
            bot.send_message(message.chat.id, f'  {tit}' + '\n' + f'{date_post}' + '\n' + f'  {url_post}')
    if message.text == '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
        markup_faq = types.InlineKeyboardMarkup()
        faq1 = types.InlineKeyboardButton('–ö—Ç–æ –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å Axelar?',callback_data='q1')
        faq2 = types.InlineKeyboardButton('–ê—É–¥–∏—Ç—ã', callback_data='q2')
        faq3 = types.InlineKeyboardButton('–¢–µ—Å—Ç–æ–≤—è —Å–µ—Ç—å', callback_data='q3')
        faq4 = types.InlineKeyboardButton('–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π?', callback_data='q4')
        markup_faq.add(faq1, faq2, faq3,faq4)
        bot.send_message(message.chat.id, '<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã –≤–æ–ø—Ä–æ—Å—ã:</b>', parse_mode='HTML', reply_markup=markup_faq)


@bot.callback_query_handler(func=lambda call:True)
def answer(call):
    if call.data == 'q1':
        bot.send_message(call.message.chat.id, '<b>C Axelar –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–æ–≤–∞—Ç—å:</b>', parse_mode='HTML')
        bot.send_message(call.message.chat.id, '<b>–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>  –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç  –ø–µ—Ä–µ—Å—Ç–∏ —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –æ–¥–Ω–æ–π —Å–µ—Ç–∏ –≤ –¥—Ä—É–≥—É—é, –¥–ª—è —ç—Ç–æ–≥–æ Axelar —Ä–µ–∞–ª—Ç–∑–æ–≤–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Satellite', parse_mode='HTML')
        bot.send_message(call.message.chat.id, '<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤</b>  –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å Axlear –ø–æ–¥–∫–ª—é—á–∞—è —Å–≤–æ–π –±–ª–æ–∫—á–µ–π–Ω—ã –∫ —Å–µ—Ç–∏ Axlear', parse_mode='HTML')
        bot.send_message(call.message.chat.id, '<b>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</b>  –ø–æ–¥–∫–ª—é—á–∏–≤—à–∏—Å—å –∫ Axelar, –æ–Ω–∏ —Å–º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–∫—Ç–∏–≤–∞–º–∏ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —ç–∫–æ—Å–∏—Å—Ç–µ–º.', parse_mode='HTML')
    if call.data == 'q2':
        bot.send_message(call.message.chat.id, '<b>Axelar –ø—Ä–æ—à–ª–∞ —Å–ª–µ–¥—é—â–∏–µ –∞—É–¥–∏—Ç—ã:</b>', parse_mode='HTML')
        bot.send_message(call.message.chat.id, 'üî∫ NCC', parse_mode='MarkdownV2')
        bot.send_message(call.message.chat.id, 'üî∫[Cure53](https://cure53.de/)', parse_mode='MarkdownV2')
        bot.send_message(call.message.chat.id, 'üî∫[Oak Security](https://www.oaksecurity.io/)', parse_mode='MarkdownV2')
    if call.data =='q3':
        bot.send_message(call.message.chat.id, '–¢–µ—Å—Ç–æ–≤—è —Å–µ—Ç—å Axelar –±—É–¥–µ—Ç –¥–æ –∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–≤–æ–π —Å–µ—Ç–∏ –±—É–¥–µ—Ç –∫–∫–∂–¥—ã–µ 4-8 –Ω–µ–¥–µ–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å—Å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤', parse_mode='HTML')
    if call.data =='q4':
        bot.send_message(call.message.chat.id, '<b>–ë–ª—è —Å–≤—è–∑–∏ —Å –∫–æ–º–∞–¥–æ–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:</b>', parse_mode='HTML')
        bot.send_message(call.message.chat.id, 'üî∫[Discord](https://discord.com/invite/aRZ3Ra6f7D)', parse_mode='MarkdownV2')
        bot.send_message(call.message.chat.id, 'üî∫[Telegram](https://t.me/axelarcommunity)', parse_mode='MarkdownV2')

# START_BOT
bot.polling(non_stop=True)